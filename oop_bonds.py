# -*- coding: utf-8 -*-
"""oop_bonds.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Simon0502/hw-for-class9/blob/main/oop_bonds.ipynb

# Random Bond Class
"""

# Bond
# Automatic population of attributes

import numpy as np

class bond:
    def __init__(self):
        self.face = (round(np.random.uniform()*10,0)+1)*1e6
        self.couponRate = round(np.random.uniform()/3,3)
        self.pmtperyear = int(round(np.random.uniform(),0)+1)
        self.m = int(round(np.random.uniform()*10,0))
        self.ytm = round(np.random.uniform()/3,3)
        self.m = round(np.random.uniform()*5+5)
        self.price = 0
        self.duration = 0
    def __repr__(self):
        return "{},{},{},{}".format(self.face,self.ytm,self.couponRate,self.m)

b1 = bond()
print(b1)

# Bond
# Automatic population of attributes
# Assign function available to set attributes

class bond:
    def __init__(self):
        self.face = (round(np.random.uniform()*10,0)+1)*1e6
        self.couponrate = round(np.random.uniform()/3,3)
        self.pmtperyear = int(round(np.random.uniform(),0)+1)
        self.m = int(round(np.random.uniform()*10,0))
        self.ytm = round(np.random.uniform()/3,3)
        self.m = round(np.random.uniform()*5+5)
        self.price = 0
        self.duration = 0
    def __repr__(self):
        return "{},{},{},{}".format(self.face,self.ytm,self.couponrate,self.m)
    def Assign(self,face,couponrate,m,ytm,pmtperyear):
        self.face = face
        self.couponrate = couponrate
        self.pmtperyear = pmtperyear
        self.m = m
        self.ytm = ytm

b2 = bond()
print(b2)
b2.Assign(2e6,.03,.04,100,1)
print(b2)

# Bond
# Automatic population of attributes
# Assign function available to set attributes
# Methods for price and duration

class bond:
    def __init__(self):
        self.face = (round(np.random.uniform()*10,0)+1)*1e6
        self.couponrate = round(np.random.uniform()/3,3)
        self.pmtperyear = int(round(np.random.uniform(),0)+1)
        self.m = int(round(np.random.uniform()*10,0))
        self.ytm = round(np.random.uniform()/3,3)
        self.m = round(np.random.uniform()*5+5)
        self.price = 0
        self.duration = 0
    def __repr__(self):
        return "{},{},{},{},{},{}".format(self.face,self.ytm,self.couponrate,self.m,round(self.price,2),round(self.duration,2))
    def Assign(self,face,ytm,couponrate,m,pmtperyear):
        self.face = face
        self.couponrate = couponrate
        self.pmtperyear = pmtperyear
        self.m = m
        self.ytm = ytm
    def getPrice(self):
        face = self.face
        couponrate = self.couponrate
        pmtperyear = self.pmtperyear
        m = self.m
        y = self.ytm

        C = face * couponrate / pmtperyear
        n = m * pmtperyear
        y_eff = y/pmtperyear
        B = 0
        for i in range(1,n+1):
            pv = (1+y_eff)**(-i)
            B_i = C * pv
            B += B_i
        B += face * pv
        self.price = B
    def getDuration(self):
        face = self.face
        couponrate = self.couponrate
        pmtperyear = self.pmtperyear
        m = self.m
        y = self.ytm
        C = face * couponrate / pmtperyear
        n = m * pmtperyear
        y_eff = y/pmtperyear
        B = 0
        Btime = 0
        for i in range(1,n+1):
            pv = (1+y_eff)**(-i)
            B_i = C * pv
            B += B_i
            Btime_i = i * B_i
            Btime += Btime_i
        B += face * pv
        Btime += face * pv * i
        self.duration = Btime/B

b3 = bond()
b3.Assign(2e6,.03,.04,10,1)
print(b3.price)
b3.getPrice()
print(b3.price)
b3.getDuration()
print(b3.duration)

# Create a portfolio of bonds

bonds = []
n = 5
for i in range(n):
    bonds.append(bond())

#%%
for b in bonds:
    print(b)

# Create a portfolio of bonds
# Get price and duration of bonds

#%%
for b in bonds:
    b.getPrice()
    b.getDuration()

#%%
for b in bonds:
    print(b)

# Calculated portfolio duration

def PortfolioDuration(bonds):
    num = 0
    den = 0
    for x in bonds:
        D_i = x.duration
        w_i = x.price
        num += D_i * w_i
        den += w_i
    duration = num/den
    return(duration)

print(PortfolioDuration(bonds))

"""# Inheritance"""

# Demo of Inheritance
# Create a class buy building on a previous one

class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
        self.mileage = 0

class ElectricCar(Car):
    def __init__(self, make, model, year, battery_size):
        super().__init__(make, model, year)
        self.battery_size = battery_size

"""# Questions
Study the example of Inheritance above.<br>
Study the basics of [convertible bonds](https://www.investopedia.com/terms/c/convertiblebond.asp)

# Q1 Update Bond Class

Create a new version of the bond class <br>
- Make it so that the bond requries values to be passed to it when it's initialized.  
- This does the same work that the Assign method does.
- Remove the Assign method. <br>
"""
class bond:
    def __init__(self,face,couponrate,m,ytm,pmtperyear):
        self.face = face
        self.ytm = ytm
        self.couponrate = couponrate
        self.pmtperyear = pmtperyear
        self.m = m
        self.price = 0
        self.duration = 0
    def __repr__(self):
        return '{},{},{},{}'.format(self.face, self.ytm, self.couponrate, self.m)


"""# Q2 Create Convertible Class


Create a new class that inherits from the bond class. <br>
- This means that the new class builds on the previous one. <br>
- Use the code below to create a new class called convertible bond.<br>

The class declaration must have the class it builds on as an argmument.
- class convertible(bond):<br>

The initialization function of the new class must take in all the arguments of the original bond class plus any new attributes.
- The old attributes are face,ytm,couponrate,m,pmtperyear
- Please add this new attribute: conversion_ratio

Use the initialization function of the original bond class to build the part of the new class that uses the bond class.<br>Send all of the arguments that build the original bond function to
- super().__init__(<ARGUMENTS>)

Initialize the values of the new arguments to the new class.
- self.conversion_ratio = conversion_ratio





"""
class bond:
    def __init__(self,face,couponrate,m,ytm,pmtperyear):
        self.face = face
        self.ytm = ytm
        self.couponrate = couponrate
        self.pmtperyear = pmtperyear
        self.m = m
        self.price = 0
        self.duration = 0
    def __repr__(self):
        return '{},{},{},{}'.format(self.face, self.ytm, self.couponrate, self.m)

class convertible(bond):
    def __init__(self,face,couponrate,m,ytm,pmtperyear,conversion_ratio):
        super().__init__(face,couponrate,m,ytm,pmtperyear)
        self.conversion_ratio = conversion_ratio
    def __repr__(self):
        return '{},{},{},{},{},{},{}'.format(self.face, self.ytm, self.couponrate, self.m,round(self.price,2),round(self.duration,2),self.conversion_ratio)


"""# Q3 Estimate num_bonds
Study this [link](https://www.investopedia.com/terms/c/conversionratio.asp)<br>
Get the number of bonds<br>
- Recall that a bond is generally set to $1000 face amount
- Create a new attribute to be calculated an initialization
- self.num_bonds = self.face/1000

We can think of the overall bond face amount and price as the value of the overall position.
"""
class bond:
    def __init__(self,face,couponrate,m,ytm,pmtperyear):
        self.face = face
        self.ytm = ytm
        self.couponrate = couponrate
        self.pmtperyear = pmtperyear
        self.m = m
        self.price = 0
        self.duration = 0
        self.num_bonds = self.face/1000
    def __repr__(self):
        return '{},{},{},{}'.format(self.face, self.ytm, self.couponrate, self.m)

class convertible(bond):
    def __init__(self,face,couponrate,m,ytm,pmtperyear,conversion_ratio):
        super().__init__(face,couponrate,m,ytm,pmtperyear)
        self.conversion_ratio = conversion_ratio
    def __repr__(self):
        return '{},{},{},{},{},{},{}'.format(self.face, self.ytm, self.couponrate, self.m,round(self.price,2),round(self.duration,2),self.conversion_ratio)



"""# Q4 Estimate Conversion Ratio
Create a method that calculates the conversion market value.<br>
The market value equals the number of bonds times the conversion ratio * the market price.<br>
The market price is an argument to the method.<br>

getConversionValue(stock_price) = # Your work here
"""
class convertible(bond):
    def __init__(self,face,couponrate,m,ytm,pmtperyear,conversion_ratio):
        super().__init__(face,couponrate,m,ytm,pmtperyear)
        self.conversion_ratio = conversion_ratio
    def __repr__(self):
        return '{},{},{},{},{},{},{}'.format(self.face, self.ytm, self.couponrate, self.m,round(self.price,2),round(self.duration,2),self.conversion_ratio)

    def getConversionValue(self, stock_price):
        return self.num_bonds * self.conversion_ratio * stock_price


"""# Q5 Estimate Equity Conversion Price
Create a method that calculates the parity stock price.<br>
The method returns the stock price that matches the current value of the overall bond position.<br>
getConversionPrice() = # Your work here
"""
class bond:
    def __init__(self,face,couponrate,m,ytm,pmtperyear):
        self.face = face
        self.ytm = ytm
        self.couponrate = couponrate
        self.pmtperyear = pmtperyear
        self.m = m
        self.price = 0
        self.duration = 0
        self.num_bonds = self.face/1000
    def __repr__(self):
        return '{},{},{},{}'.format(self.face, self.ytm, self.couponrate, self.m)

class convertible(bond):
    def __init__(self,face,couponrate,m,ytm,pmtperyear,conversion_ratio):
        super().__init__(face,couponrate,m,ytm,pmtperyear)
        self.conversion_ratio = conversion_ratio
    def __repr__(self):
        return '{},{},{},{},{},{},{}'.format(self.face, self.ytm, self.couponrate, self.m,round(self.price,2),round(self.duration,2),self.conversion_ratio)
    def getPrice(self):
        face = self.face
        couponrate = self.couponrate
        pmtperyear = self.pmtperyear
        m = self.m
        y = self.ytm

        C = face * couponrate / pmtperyear
        n = m * pmtperyear
        y_eff = y/pmtperyear
        B = 0
        for i in range(1,n+1):
            pv = (1+y_eff)**(-i)
            B_i = C * pv
            B += B_i
        B += face * pv
        self.price = B
    def getConversionPrice(self):
        self.getPrice()
        return self.price / self.conversion_ratio

